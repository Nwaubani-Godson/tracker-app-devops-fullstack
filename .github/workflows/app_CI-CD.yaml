name: Task Tracker CI/CD

on:
  push:
    branches:
      - main    
  workflow_dispatch: 

jobs:
  test_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Dependencies and Run Tests
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx
          pytest ./tests/

  build_and_deploy_staging:
    needs: test_backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Backend Image (Staging)
        run: |
          docker build -t backend ./backend
          docker tag backend:latest ${{ steps.login-ecr.outputs.registry }}/staging-backend-repo:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/staging-backend-repo:latest

      - name: Build and Push Frontend Image (Staging)
        run: |
          docker build -t frontend ./frontend
          docker tag frontend:latest ${{ steps.login-ecr.outputs.registry }}/staging-frontend-repo:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/staging-frontend-repo:latest

      - name: Create .env File for Docker Compose (Staging)
        run: |
          echo "BACKEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/staging-backend-repo:latest" > .env
          echo "FRONTEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/staging-frontend-repo:latest" >> .env
          echo "FRONTEND_EXTERNAL_BACKEND_URL=http://${{ secrets.STAGING_EC2_HOST }}:8000" >> .env

      - name: Deploy to EC2 (Staging)
        env:
          HOST: ${{ secrets.STAGING_EC2_HOST }} 
          USERNAME: ubuntu
          KEY: ${{ secrets.STAGING_EC2_SSH_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "$KEY" > key.pem
          chmod 600 key.pem

          # Transfer docker-compose.yaml and .env file to the EC2 instance
          scp -o StrictHostKeyChecking=no -i key.pem docker-compose.yaml .env $USERNAME@$HOST:/home/ubuntu/tracker-app/

          # Run deployment commands remotely
          ssh -o StrictHostKeyChecking=no -i key.pem $USERNAME@$HOST << 'EOF'
            set -e
            cd /home/ubuntu/tracker-app

            # Login to ECR on the EC2 instance
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "$ECR_REGISTRY"

            # Pull latest images based on .env, then recreate/start containers
            docker-compose --env-file .env pull
            docker-compose --env-file .env down # Stop and remove old containers
            # --force-recreate ensures containers are rebuilt, running the entrypoint.sh
            docker-compose --env-file .env up -d --force-recreate

            docker image prune -f
          EOF

  deploy_production:
    needs: build_and_deploy_staging 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Backend Image (Production)
        run: |
          docker build -t backend ./backend
          docker tag backend:latest ${{ steps.login-ecr.outputs.registry }}/production-backend-repo:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/production-backend-repo:latest

      - name: Build and Push Frontend Image (Production)
        run: |
          docker build -t frontend ./frontend
          docker tag frontend:latest ${{ steps.login-ecr.outputs.registry }}/production-frontend-repo:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/production-frontend-repo:latest

      - name: Create .env File for Docker Compose (Production)
        run: |
          echo "BACKEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/production-backend-repo:latest" > .env
          echo "FRONTEND_IMAGE=${{ steps.login-ecr.outputs.registry }}/production-frontend-repo:latest" >> .env
          echo "FRONTEND_EXTERNAL_BACKEND_URL=https://${{ secrets.PROD_EC2_HOST }}:8000" >> .env

      - name: Deploy to EC2 (Production)
        env:
          HOST: ${{ secrets.PROD_EC2_HOST }}
          USERNAME: ubuntu
          KEY: ${{ secrets.PROD_EC2_SSH_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "$KEY" > key.pem
          chmod 600 key.pem

          # Transfer docker-compose.yaml and .env file to the EC2 instance
          scp -o StrictHostKeyChecking=no -i key.pem docker-compose.yaml .env $USERNAME@$HOST:/home/ubuntu/tracker-app/

          # Run deployment commands remotely
          ssh -o StrictHostKeyChecking=no -i key.pem $USERNAME@$HOST << 'EOF'
            set -e
            cd /home/ubuntu/tracker-app

            # Login to ECR on the EC2 instance
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "$ECR_REGISTRY"

            # Pull latest images based on .env, then recreate/start containers
            docker-compose --env-file .env pull
            docker-compose --env-file .env down
            docker-compose --env-file .env up -d --force-recreate

            # Remove old images
            docker image prune -f
          EOF