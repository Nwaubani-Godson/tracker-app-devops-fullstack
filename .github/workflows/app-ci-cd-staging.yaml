name: CI/CD - Staging

on:
  # push:
  #   branches:
  #     - develop
  workflow_dispatch:

jobs:
  test_backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Dependencies and Run Tests
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx
          pytest ./tests/

  deploy_staging:
    needs: test_backend
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug secrets
        run: |
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}"
          echo "ECR_REGISTRY=${{ env.ECR_REGISTRY }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Staging Images
        run: |
          IMAGE_TAG=${GITHUB_SHA}

          # Backend
          docker build -t backend ./backend
          docker tag backend:latest $ECR_REGISTRY/staging-backend-repo:$IMAGE_TAG
          docker push $ECR_REGISTRY/staging-backend-repo:$IMAGE_TAG
          docker tag backend:latest $ECR_REGISTRY/staging-backend-repo:latest
          docker push $ECR_REGISTRY/staging-backend-repo:latest

          # Frontend
          docker build -t frontend ./frontend
          docker tag frontend:latest $ECR_REGISTRY/staging-frontend-repo:$IMAGE_TAG
          docker push $ECR_REGISTRY/staging-frontend-repo:$IMAGE_TAG
          docker tag frontend:latest $ECR_REGISTRY/staging-frontend-repo:latest
          docker push $ECR_REGISTRY/staging-frontend-repo:latest

      - name: Create .env for Staging
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          echo "BACKEND_IMAGE=$ECR_REGISTRY/staging-backend-repo:$IMAGE_TAG" > .env
          echo "FRONTEND_IMAGE=$ECR_REGISTRY/staging-frontend-repo:$IMAGE_TAG" >> .env
          echo "FRONTEND_EXTERNAL_BACKEND_URL=http://${{ secrets.STAGING_EC2_HOST }}:8000" >> .env
          echo APP_IP=${{ secrets.APP_SERVER_PRIVATE_IP }} >> .env
          echo MON_IP=${{ secrets.MONITORING_SERVER_PRIVATE_IP }} >> .env
          echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK }}" >> .env

      - name: Deploy to EC2 (Staging)
        env:
          HOST: ${{ secrets.STAGING_EC2_HOST }}
          USERNAME: ubuntu
          KEY: ${{ secrets.STAGING_EC2_SSH_KEY }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        run: |
          echo "$KEY" > key.pem
          chmod 600 key.pem

          # Copy docker-compose + env file
          scp -o StrictHostKeyChecking=no -i key.pem docker-compose.yaml .env $USERNAME@$HOST:/home/ubuntu/tracker-app/

          # SSH into EC2 and deploy
          ssh -o StrictHostKeyChecking=no -i key.pem $USERNAME@$HOST << EOF
          echo ">>> DEBUG inside EC2: ECR_REGISTRY=$ECR_REGISTRY"
          set -e
          cd /home/ubuntu/tracker-app

          echo ">>> Authenticating Docker to ECR..."
          aws ecr get-login-password --region us-east-1 \
            | docker login --username AWS --password-stdin $ECR_REGISTRY || { echo "ECR login failed!"; exit 1; }

          echo ">>> Pulling and restarting containers..."
          docker-compose --env-file .env pull || { echo "Pull failed"; exit 1; }
          docker-compose --env-file .env down
          docker-compose --env-file .env up -d

          echo ">>> Waiting for backend to become healthy..."
          sleep 15
          curl -v http://localhost:8000/health || (echo "Backend health check failed!" && exit 1)
          EOF
          echo ">>> Deployment to Staging completed successfully!"